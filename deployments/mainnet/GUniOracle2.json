{
  "address": "0x50F6141b99FD56e129F66fcc1A08611644069F6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feed0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feed1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformId",
      "outputs": [
        {
          "internalType": "enum IExtendedAggregator.PlatformId",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenType",
      "outputs": [
        {
          "internalType": "enum IExtendedAggregator.TokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf31c095ab84346dd2aff10e96fae727eb2825a2adfb80cffa670420973d349a4",
  "receipt": {
    "to": null,
    "from": "0x88215a2794ddC031439C72922EC8983bDE831c78",
    "contractAddress": "0x50F6141b99FD56e129F66fcc1A08611644069F6b",
    "transactionIndex": 47,
    "gasUsed": "705648",
    "logsBloom": "0x
    "blockHash": "0x99e41dfa224b237e183362e497b2070bdf98d45885d6c140479c8fb624ba98bb",
    "transactionHash": "0xf31c095ab84346dd2aff10e96fae727eb2825a2adfb80cffa670420973d349a4",
    "logs": [],
    "blockNumber": 13674440,
    "cumulativeGasUsed": "3244802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2eeC91055F07fE24C9cCB25828ecfEFd4be0c41",
    "0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6",
    "0x3E7d1eAB13ad0104d2750B8863b489D65364e32D"
  ],
  "solcInputHash": "61c68f84e03dcb97df7c72ff4d8e37f5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformId\",\"outputs\":[{\"internalType\":\"enum IExtendedAggregator.PlatformId\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"enum IExtendedAggregator.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Returns the decimals of latestAnswer()\",\"returns\":{\"_0\":\"uint8\"}},\"getPlatformId()\":{\"details\":\"Returns the platform id to categorize the price aggregator\",\"returns\":{\"_0\":\"uint256 1 = Uniswap, 2 = Balancer, 3 = G-UNI\"}},\"getSubTokens()\":{\"details\":\"Returns the number of tokens that composes the LP shares\",\"returns\":{\"_0\":\"address[] memory of token addresses\"}},\"getToken()\":{\"details\":\"Returns the LP shares token\",\"returns\":{\"_0\":\"address of the LP shares token\"}},\"getTokenType()\":{\"details\":\"Returns token type for categorization\",\"returns\":{\"_0\":\"uint256 1 = Simple (Native or plain ERC20s), 2 = Complex (LP Tokens, Staked tokens)\"}},\"latestAnswer()\":{\"details\":\"Returns the latest price\",\"returns\":{\"_0\":\"int256 price\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GUniOracle.sol\":\"GUniOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GUniOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// GUniOracle.sol \\n\\n// based heavily on GUniLPOracle.sol from MakerDAO\\n// found here: https://github.com/makerdao/univ3-lp-oracle/blob/master/src/GUniLPOracle.sol\\n// Copyright (C) 2017-2020 Maker Ecosystem Growth Holdings, INC.\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n///////////////////////////////////////////////////////\\n//                                                   //\\n//    Methodology for Calculating LP Token Price     //\\n//                                                   //\\n///////////////////////////////////////////////////////\\n\\n// We derive the sqrtPriceX96 via Chainlink Oracles to prevent price manipulation in the pool:\\n// \\n// p0 = price of token0 in USD (18 decimal precision)\\n// p1 = price of token1 in USD (18 decimal precision)\\n// UNITS_0 = decimals of token0\\n// UNITS_1 = decimals of token1\\n// \\n// token1/token0 = (p0 / 10^UNITS_0) / (p1 / 10^UNITS_1)               [price ratio, Uniswap format]\\n//               = (p0 * 10^UNITS_1) / (p1 * 10^UNITS_0)\\n// \\n// sqrtPriceX96 = sqrt(token1/token0) * 2^96                           [From Uniswap's definition]\\n//              = sqrt((p0 * 10^UNITS_1) / (p1 * 10^UNITS_0)) * 2^96\\n//              = sqrt((p0 * 10^UNITS_1) / (p1 * 10^UNITS_0)) * 2^48 * 2^48\\n//              = sqrt((p0 * 10^UNITS_1 * 2^96) / (p1 * 10^UNITS_0)) * 2^48\\n// \\n// Once we have the sqrtPriceX96 we can use that to compute the fair reserves for each token. \\n// This part may be slightly subjective depending on the implementation, \\n// but we expect token to provide something like getUnderlyingBalancesAtPrice(uint160 sqrtPriceX96)\\n// which will forward our oracle derived `sqrtPriceX96` \\n// to Uniswap's LiquidityAmounts.getAmountsForLiquidity(...)\\n// This function will return the fair reserves for each token.\\n// Vendor-specific logic is then used to tack any uninvested fees on top of those amounts.\\n// \\n// Once we have the fair reserves and the prices we can compute the token price by:\\n// \\n// Token Price = TVL / Token Supply\\n//             = (r0 * p0 + r1 * p1) / totalSupply\\n\\n\\npragma solidity =0.6.12;\\n\\nimport {IExtendedAggregator} from \\\"./vendor/IExtendedAggregator.sol\\\";\\nimport {IGUniPool} from \\\"./vendor/IGUniPool.sol\\\";\\n\\ncontract GUniOracle is IExtendedAggregator {\\n    // solhint-disable private-vars-leading-underscore, var-name-mixedcase\\n    uint256 private immutable UNIT_0;\\n    uint256 private immutable UNIT_1;\\n    uint256 private immutable TO_WAD_0;\\n    uint256 private immutable TO_WAD_1;\\n    uint256 private immutable TO_WAD_ORACLE_0;\\n    uint256 private immutable TO_WAD_ORACLE_1;\\n\\n    address public immutable pool;\\n    address public immutable priceFeed0;\\n    address public immutable priceFeed1;\\n\\n    constructor(address _pool, address _feed0, address _feed1) public {\\n        uint256 dec0 = uint256(IExtendedAggregator(IGUniPool(_pool).token0()).decimals());\\n        require(dec0 <= 18, \\\"token0-dec-gt-18\\\");\\n        UNIT_0 = 10 ** dec0;\\n        TO_WAD_0 = 10 ** (18 - dec0);\\n        uint256 dec1 = uint256(IExtendedAggregator(IGUniPool(_pool).token1()).decimals());\\n        require(dec1 <= 18, \\\"token1-dec-gt-18\\\");\\n        UNIT_1 = 10 ** dec1;\\n        TO_WAD_1 = 10 ** (18 - dec1);\\n        uint256 decOracle0 = uint256(IExtendedAggregator(_feed0).decimals());\\n        require(decOracle0 <= 18, \\\"oracle0-dec-gt-18\\\");\\n        TO_WAD_ORACLE_0 = 10 ** (18 - decOracle0);\\n        uint256 decOracle1 = uint256(IExtendedAggregator(_feed1).decimals());\\n        require(decOracle1 <= 18, \\\"oracle1-dec-gt-18\\\");\\n        TO_WAD_ORACLE_1 = 10 ** (18 - decOracle1);\\n        pool = _pool;\\n        priceFeed0 = _feed0;\\n        priceFeed1 = _feed1;\\n    }\\n\\n    function latestAnswer() external view override returns (int256) {\\n        // All Oracle prices are priced with 18 decimals against USD\\n        uint256 p0 = _getWADPrice(true);  // Query token0 price from oracle (WAD)\\n        uint256 p1 = _getWADPrice(false);  // Query token1 price from oracle (WAD)\\n        uint160 sqrtPriceX96 =\\n            _toUint160(_sqrt(_mul(_mul(p0, UNIT_1), (1 << 96)) / (_mul(p1, UNIT_0))) << 48);\\n\\n        // Get balances of the tokens in the pool\\n        (uint256 r0, uint256 r1) = IGUniPool(pool).getUnderlyingBalancesAtPrice(sqrtPriceX96);\\n        require(r0 > 0 || r1 > 0, \\\"invalid-balances\\\");\\n        uint256 totalSupply = IGUniPool(pool).totalSupply();\\n        // Protect against precision errors with dust-levels of collateral\\n        require(totalSupply >= 1e9, \\\"total-supply-too-small\\\");\\n\\n        // Add the total value of each token together and divide by totalSupply to get unit price\\n        uint256 preq = _add(\\n            _mul(p0, _mul(r0, TO_WAD_0)),\\n            _mul(p1, _mul(r1, TO_WAD_1))\\n        ) / totalSupply;\\n        \\n        return int256(preq);\\n    }\\n\\n    function getToken() external view override returns (address) {\\n        return pool;\\n    }\\n\\n    function getSubTokens() external view override returns (address[] memory) {\\n        address[] memory arr = new address[](2);\\n        arr[0] = IGUniPool(pool).token0();\\n        arr[1] = IGUniPool(pool).token1();\\n        return arr;\\n    }\\n\\n    function getPlatformId() external pure override returns (IExtendedAggregator.PlatformId) {\\n        return IExtendedAggregator.PlatformId.GUni;\\n    }\\n\\n    function getTokenType() external pure override returns (IExtendedAggregator.TokenType) {\\n        return IExtendedAggregator.TokenType.Complex;\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function _getWADPrice(bool isToken0)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int256 price = IExtendedAggregator(isToken0 ? priceFeed0 : priceFeed1).latestAnswer();\\n        require(price > 0, \\\"negative-price\\\");\\n        return _mul(uint256(price), isToken0 ? TO_WAD_ORACLE_0 : TO_WAD_ORACLE_1);\\n    }\\n\\n    function _add(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\\n        require((z = _x + _y) >= _x, \\\"add-overflow\\\");\\n    }\\n    function _sub(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\\n        require((z = _x - _y) <= _x, \\\"sub-underflow\\\");\\n    }\\n    function _mul(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\\n        require(_y == 0 || (z = _x * _y) / _y == _x, \\\"mul-overflow\\\");\\n    }\\n    function _toUint160(uint256 x) internal pure returns (uint160 z) {\\n        require((z = uint160(x)) == x, \\\"uint160-overflow\\\");\\n    }\\n\\n    // solhint-disable-next-line max-line-length\\n    // FROM https://github.com/abdk-consulting/abdk-libraries-solidity/blob/16d7e1dd8628dfa2f88d5dadab731df7ada70bdd/ABDKMath64x64.sol#L687\\n    // solhint-disable-next-line code-complexity\\n    function _sqrt(uint256 _x) private pure returns (uint128) {\\n        if (_x == 0) return 0;\\n        else {\\n            uint256 xx = _x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n            if (xx >= 0x8) { r <<= 1; }\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1;\\n            r = (r + _x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = _x / r;\\n            return uint128 (r < r1 ? r : r1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdc243e7d88ebc3f802178d8cd857ea1a7ac23ad55f646534f20f45a514dd8d2\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vendor/IExtendedAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity =0.6.12;\\n\\ninterface IExtendedAggregator {\\n    enum TokenType {Invalid, Simple, Complex}\\n\\n    enum PlatformId {Invalid, Simple, Uniswap, Balancer, GUni}\\n\\n    /**\\n     * @dev Returns the LP shares token\\n     * @return address of the LP shares token\\n     */\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of tokens that composes the LP shares\\n     * @return address[] memory of token addresses\\n     */\\n    function getSubTokens() external view returns (address[] memory);\\n    \\n    /**\\n     * @dev Returns the latest price\\n     * @return int256 price\\n     */\\n    function latestAnswer() external view returns (int256);\\n\\n    /**\\n     * @dev Returns the decimals of latestAnswer()\\n     * @return uint8\\n     */\\n    function decimals() external pure returns (uint8);\\n    \\n    /**\\n     * @dev Returns the platform id to categorize the price aggregator\\n     * @return uint256 1 = Uniswap, 2 = Balancer, 3 = G-UNI\\n     */\\n    function getPlatformId() external pure returns (PlatformId);\\n\\n    /**\\n     * @dev Returns token type for categorization\\n     * @return uint256 1 = Simple (Native or plain ERC20s), 2 = Complex (LP Tokens, Staked tokens)\\n     */\\n    function getTokenType() external pure returns (TokenType);\\n}\",\"keccak256\":\"0x7605052811f36faf3120face3cfa27b6b694d990c532c23b952b0a9494af80f2\",\"license\":\"agpl-3.0\"},\"contracts/vendor/IGUniPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity =0.6.12;\\n\\ninterface IGUniPool {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getUnderlyingBalancesAtPrice(uint160) external view returns (uint256, uint256);\\n    function getUnderlyingBalances() external view returns (uint256, uint256);\\n    function totalSupply() external view returns (uint256);\\n}\",\"keccak256\":\"0xb57b98506bd16f3910d4ae582c6cb53f1aafa885ac2df47796da5efb9ecc448e\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063385aee1b11610066578063385aee1b1461013a5780634b0ca9731461014257806350d25bcd1461016b578063ab0ca0e114610185578063fcab18191461018d57610093565b806316f0115b1461009857806321df0da7146100bc57806325f33d76146100c4578063313ce5671461011c575b600080fd5b6100a06101a5565b604080516001600160a01b039092168252519081900360200190f35b6100a06101c9565b6100cc6101ed565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101085781810151838201526020016100f0565b505050509050019250505060405180910390f35b610124610374565b6040805160ff9092168252519081900360200190f35b6100a0610379565b61014a61039d565b6040518082600481111561015a57fe5b815260200191505060405180910390f35b6101736103a2565b60408051918252519081900360200190f35b6100a06106a6565b6101956106ca565b6040518082600281111561015a57fe5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000090565b6040805160028082526060808301845292839291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561026a57600080fd5b505afa15801561027e573d6000803e3d6000fd5b505050506040513d602081101561029457600080fd5b5051815182906000906102a357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561031c57600080fd5b505afa158015610330573d6000803e3d6000fd5b505050506040513d602081101561034657600080fd5b505181518290600190811061035757fe5b6001600160a01b0390921660209283029190910190910152905090565b601290565b7f000000000000000000000000000000000000000000000000000000000000000081565b600490565b6000806103af60016106cf565b905060006103bd60006106cf565b9050600061045060306104376103f3857f0000000000000000000000000000000000000000000000000000000000000000610829565b61042a610420887f0000000000000000000000000000000000000000000000000000000000000000610829565b600160601b610829565b8161043157fe5b0461088a565b6001600160801b0316901b6001600160801b03166109d1565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b670ed7d846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050604080518083038186803b1580156104c157600080fd5b505afa1580156104d5573d6000803e3d6000fd5b505050506040513d60408110156104eb57600080fd5b5080516020909101519092509050811515806105075750600081115b61054b576040805162461bcd60e51b815260206004820152601060248201526f696e76616c69642d62616c616e63657360801b604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d60208110156105d057600080fd5b50519050633b9aca00811015610626576040805162461bcd60e51b81526020600482015260166024820152751d1bdd185b0b5cdd5c1c1b1e4b5d1bdbcb5cdb585b1b60521b604482015290519081900360640190fd5b60008161069261065f8961065a887f0000000000000000000000000000000000000000000000000000000000000000610829565b610829565b61068d8961065a887f0000000000000000000000000000000000000000000000000000000000000000610829565b610a22565b8161069957fe5b0497505050505050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600290565b600080826106fd577f000000000000000000000000000000000000000000000000000000000000000061071f565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075757600080fd5b505afa15801561076b573d6000803e3d6000fd5b505050506040513d602081101561078157600080fd5b50519050600081136107cb576040805162461bcd60e51b815260206004820152600e60248201526d6e656761746976652d707269636560901b604482015290519081900360640190fd5b61082081846107fa577f000000000000000000000000000000000000000000000000000000000000000061065a565b7f0000000000000000000000000000000000000000000000000000000000000000610829565b9150505b919050565b60008115806108445750508082028282828161084157fe5b04145b610884576040805162461bcd60e51b815260206004820152600c60248201526b6d756c2d6f766572666c6f7760a01b604482015290519081900360640190fd5b92915050565b60008161089957506000610824565b816001600160801b82106108b25760809190911c9060401b5b6801000000000000000082106108cd5760409190911c9060201b5b64010000000082106108e45760209190911c9060101b5b6201000082106108f95760109190911c9060081b5b610100821061090d5760089190911c9060041b5b601082106109205760049190911c9060021b5b6008821061092c5760011b5b600181858161093757fe5b048201901c9050600181858161094957fe5b048201901c9050600181858161095b57fe5b048201901c9050600181858161096d57fe5b048201901c9050600181858161097f57fe5b048201901c9050600181858161099157fe5b048201901c905060018185816109a357fe5b048201901c905060008185816109b557fe5b0490508082106109c557806109c7565b815b9350505050610824565b806001600160a01b0381168114610824576040805162461bcd60e51b815260206004820152601060248201526f75696e743136302d6f766572666c6f7760801b604482015290519081900360640190fd5b80820182811015610884576040805162461bcd60e51b815260206004820152600c60248201526b6164642d6f766572666c6f7760a01b604482015290519081900360640190fdfea26469706673582212207bc79256cf247d63ce1f8776b821905908ee9f2ad2ab1bd53bf9a10bc37d84a064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decimals()": {
        "details": "Returns the decimals of latestAnswer()",
        "returns": {
          "_0": "uint8"
        }
      },
      "getPlatformId()": {
        "details": "Returns the platform id to categorize the price aggregator",
        "returns": {
          "_0": "uint256 1 = Uniswap, 2 = Balancer, 3 = G-UNI"
        }
      },
      "getSubTokens()": {
        "details": "Returns the number of tokens that composes the LP shares",
        "returns": {
          "_0": "address[] memory of token addresses"
        }
      },
      "getToken()": {
        "details": "Returns the LP shares token",
        "returns": {
          "_0": "address of the LP shares token"
        }
      },
      "getTokenType()": {
        "details": "Returns token type for categorization",
        "returns": {
          "_0": "uint256 1 = Simple (Native or plain ERC20s), 2 = Complex (LP Tokens, Staked tokens)"
        }
      },
      "latestAnswer()": {
        "details": "Returns the latest price",
        "returns": {
          "_0": "int256 price"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}